package com.example.demo;

public class LeetCodeProblemSolve {
	
	public static int hammingDistance(int x, int y) {
        int xor = x^y;
        int count = 0;
        while (xor > 0) {
            if ((xor&1) == 1) {
                count ++;
            }
            xor = xor >> 1;
        }
        return count;
    }
	public static int[] twoSum(int[] nums, int target) {
		int[] result = new int[2];
		for (int i = 0; i < nums.length; i++) {			 
			for (int j = i+1; j < nums.length; j++) {
				if(nums[i] + nums[j] == target) {
					result[0] = i; 
					result[1] = j;
					return result;
				}
			}
		}
		return nums;
    }
	
	 public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
		 
	        ListNode n1 = l1;
	        ListNode n2 = l2;
	        ListNode fakeHead = new ListNode(-1);
	        ListNode result = fakeHead;
	        int toAdd = 0;
	        while(!(n1 == null && n2 == null)){
	            int v1 = 0;
	            int v2 = 0;
	            if (n1 != null){
	                v1 = n1.val;
	                n1 = n1.next;
	            }
	            if (n2 != null){
	                v2 = n2.val;
	                n2 = n2.next;
	            }
	            int tmp = v1 + v2 + toAdd;
	            result.next = new ListNode(tmp % 10);
	            result = result.next;
	            toAdd = tmp / 10;

	        }
	        if (toAdd > 0){
	            result.next = new ListNode(toAdd);
	        }
	        return fakeHead.next;
	    }
	 
	 
	 public static int lengthOfLongestSubstring(String s) {
		 
		 boolean flag[] = new boolean[256];
		 int result = 0;
		 int start = 0;
		 char arr[] = s.toCharArray();
		 for(int i = 0; i < arr.length; i++) {
			 char current = arr[i];
			 if (flag[current]) {
				 result = Math.max(result, i - start);
				 for(int k = start; k < i; k++) {
					 if(arr[k] == current) {
						 start = k+1;
						 break;
					 }
					 flag[arr[k]] = false;
				 }
			 } else {
				 flag[current] = true;
			 }
		 }
		 result =Math.max(arr.length - start, result);
		 return result;
	 }

	public static void main(String[] args) {
		
		int a = 1, b=4;
		//hammingDistance(a, b);	
		 String s = "abcabcbb";
		 int lengthOfLongestSubstring = lengthOfLongestSubstring(s);
		 System.out.println(lengthOfLongestSubstring);

	}
		public class ListNode {
		     int val;
		     ListNode next;
		     ListNode(int x) { val = x; }
	}

}


